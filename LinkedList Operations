#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *next;
};

void linkedListTraversal(struct node *ptr){
	while(ptr!=NULL){
		printf("Element is : %d\n", ptr->data);
		ptr = ptr->next;
	}
}
struct node *insertAtFirst(struct node *head, int data){
	struct node *ptr = (struct node *)malloc(sizeof(struct node));
	ptr->data = data;
	ptr->next = head;
	head = ptr;
	return head;
}
struct node *insertAtIndex(struct node *head, int data, int index){
	struct node *ptr = (struct node *)malloc(sizeof(struct node));
	ptr->data = data;
	struct node *p = head;
	int i=0;
	while(i!=index-1){
		p = p->next;
		i++;
	}
	ptr->next = p->next;
	p->next = ptr;
	return head;
}
struct node *insertAtEnd(struct node *head, int data){
	struct node *ptr = (struct node *)malloc(sizeof(struct node));
	ptr->data = data;
	struct node *p = head;
	while(p->next!=NULL){
		p = p->next;
	}
	p->next = ptr;
	ptr->next = NULL;
	return head;
}
struct node *insertAfterNode(struct node *head, struct node *prevNode, int data){
	struct node *ptr = (struct node *)malloc(sizeof(struct node));
	ptr->data = data;
	ptr->next = prevNode->next;
	prevNode->next = ptr;
	return head;
}
struct node *deleteAtFirst(struct node *head){
	struct node *p = head;
	head = head->next;
	free(p);
	return head;
}
struct node *deleteAtIndex(struct node *head, int index){
	struct node *p = head;
	struct node *q = head->next;
	for(int i=0; i<index-1; i++){
		p = p->next;
		q = q->next;
	}
	p->next = q->next;
	free(q);
	return head;
}
struct node *deleteAtLast(struct node *head){
	struct node *p = head;
	struct node *q = head->next;
	while(q->next!=NULL){
		p = p->next;
		q = q->next;
	}
	p->next = NULL;
	free(q);
	return head;
}
int main(){
	struct node *head;
	struct node *first;
	struct node *second;
	struct node *third;
	struct node *fourth;
	
	head = (struct node *)malloc(sizeof(struct node));
	first = (struct node *)malloc(sizeof(struct node));
	second = (struct node *)malloc(sizeof(struct node));
	third = (struct node *)malloc(sizeof(struct node));
	fourth = (struct node *)malloc(sizeof(struct node));
	
	head->data = 7;
	head->next = first;
	
	first->data = 11;
	first->next = second;
	
	second->data = 66;
	second->next = third;
	
	third->data = 89;
	third->next = fourth;
	
	fourth->data = 23;
    fourth->next = NULL;
    
    printf("Before insertion\n");
    linkedListTraversal(head);
    printf("\n");
    printf("After insertion\n");
//    head = insertAtFirst(head, 56);
//    head = insertAtIndex(head, 52, 2);
//    head = insertAtEnd(head, 33);
//	head = insertAfterNode(head, second, 8 );
//    head = deleteAtFirst(head);
//	head = deleteAtIndex(head, 2);
	head = deleteAtLast(head);
    linkedListTraversal(head);
	return 0;
}
